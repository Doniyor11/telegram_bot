import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, PhotoSize
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
from datetime import datetime
import os

BOT_TOKEN = "8249402614:AAFQgtDqZtBByhe3MTU0JsuPRjK94l_HWvY"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

OPERATOR_ID = None  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
ADMIN_ID = None     # ID –∞–¥–º–∏–Ω–∞ (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)

class TaskCreationStates(StatesGroup):
    waiting_destination = State()
    waiting_address = State()

class TaskCompletionStates(StatesGroup):
    waiting_photo_report = State()

def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            role TEXT,
            is_active BOOLEAN DEFAULT 1
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            destination TEXT NOT NULL,
            address TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            assigned_to INTEGER,
            status TEXT DEFAULT 'pending',
            completed_at DATETIME,
            photo_report TEXT
        )
    ''')

    conn.commit()
    conn.close()

def get_all_employees():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, full_name FROM users WHERE role = 'employee' AND is_active = 1")
    employees = cursor.fetchall()
    conn.close()
    return employees

def assign_task(task_id, user_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET assigned_to = ?, status = 'assigned' WHERE id = ?", (user_id, task_id))
    conn.commit()
    conn.close()

def get_task(task_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()
    return task

def complete_task(task_id, photo_file_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE tasks SET status = 'completed', completed_at = CURRENT_TIMESTAMP, photo_report = ? WHERE id = ?",
        (photo_file_id, task_id)
    )
    conn.commit()
    conn.close()

@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    full_name = message.from_user.full_name or ""

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, username, full_name, role) VALUES (?, ?, ?, ?)",
            (user_id, username, full_name, "employee")
        )
        conn.commit()
        role = "employee"
    else:
        role = user[0]

    conn.close()

    if role == "operator":
        await message.answer(
            "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/create_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        )
    elif role == "admin":
        await message.answer(
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö."
        )
    else:
        await message.answer(
            "üë∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫!\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö."
        )

@router.message(Command("create_task"))
async def cmd_create_task(message: Message, state: FSMContext):
    user_id = message.from_user.id

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()

    if not user or user[0] != "operator":
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.")
        return

    await message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    await state.set_state(TaskCreationStates.waiting_destination)

@router.message(StateFilter(TaskCreationStates.waiting_destination))
async def process_destination(message: Message, state: FSMContext):
    await state.update_data(destination=message.text)
    await message.answer("üè† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(TaskCreationStates.waiting_address)

@router.message(StateFilter(TaskCreationStates.waiting_address))
async def process_address(message: Message, state: FSMContext):
    data = await state.get_data()
    destination = data['destination']
    address = message.text

    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO tasks (destination, address) VALUES (?, ?)",
        (destination, address)
    )
    task_id = cursor.lastrowid
    conn.commit()
    conn.close()

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
        f"ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
    )

    await state.clear()

    await notify_employees(task_id, destination, address)

async def notify_employees(task_id, destination, address):
    employees = get_all_employees()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data=f"accept_{task_id}")]
    ])

    message_text = (
        f"üö® –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
        f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {destination}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )

    for employee_id, username, full_name in employees:
        try:
            await bot.send_message(
                chat_id=employee_id,
                text=message_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_id}: {e}")

@router.callback_query(F.data.startswith("accept_"))
async def handle_accept_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    full_name = callback.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    task = get_task(task_id)
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if task[4]:  # assigned_to
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º")
        return

    assign_task(task_id, user_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÅ –ó–∞–∫–æ–Ω—á–∏–ª", callback_data=f"complete_{task_id}")]
    ])

    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task[1]}\n"
        f"üè† –ê–¥—Ä–µ—Å: {task[2]}\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {full_name} (@{username})\n\n"
        f"üí° –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–æ–Ω—á–∏–ª' –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ",
        reply_markup=keyboard
    )

    await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

    if ADMIN_ID:
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=(
                    f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task_id} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {full_name}\n"
                    f"üì± Username: @{username}\n"
                    f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task[1]}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {task[2]}\n"
                    f"üïê –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
                )
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

@router.callback_query(F.data.startswith("complete_"))
async def handle_complete_task(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    task = get_task(task_id)
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if task[4] != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ")
        return

    if task[5] == 'completed':
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return

    await state.update_data(completing_task_id=task_id)
    await state.set_state(TaskCompletionStates.waiting_photo_report)

    await callback.message.edit_text(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ\n\n"
        f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task[1]}\n"
        f"üè† –ê–¥—Ä–µ—Å: {task[2]}"
    )

    await callback.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–æ—Ç—á–µ—Ç")

@router.message(F.photo, StateFilter(TaskCompletionStates.waiting_photo_report))
async def process_photo_report(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get('completing_task_id')

    if not task_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    task = get_task(task_id)
    if not task:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    photo_file_id = message.photo[-1].file_id
    complete_task(task_id, photo_file_id)

    username = message.from_user.username or "–ë–µ–∑ username"
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task[1]}\n"
        f"üè† –ê–¥—Ä–µ—Å: {task[2]}\n"
        f"üì∏ –§–æ—Ç–æ-–æ—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω"
    )

    if ADMIN_ID:
        try:
            await bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo_file_id,
                caption=(
                    f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {full_name} (@{username})\n"
                    f"üìç –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task[1]}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {task[2]}\n"
                    f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
                )
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    await state.clear()

@router.message(StateFilter(TaskCompletionStates.waiting_photo_report))
async def invalid_photo_report(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞")

@router.message(Command("set_admin"))
async def cmd_set_admin(message: Message):
    global ADMIN_ID
    if message.get_args():
        try:
            admin_id = int(message.get_args())
            ADMIN_ID = admin_id

            conn = sqlite3.connect('bot.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)",
                (admin_id, "admin")
            )
            conn.commit()
            conn.close()

            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {admin_id}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_admin <user_id>")

@router.message(Command("set_operator"))
async def cmd_set_operator(message: Message):
    global OPERATOR_ID
    if message.get_args():
        try:
            operator_id = int(message.get_args())
            OPERATOR_ID = operator_id

            conn = sqlite3.connect('bot.db')
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)",
                (operator_id, "operator")
            )
            conn.commit()
            conn.close()

            await message.answer(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {operator_id}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_operator <user_id>")

dp.include_router(router)

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
